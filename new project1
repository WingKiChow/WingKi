class Book:
    def __init__(self, title, author, isbn, quantity):
        self.title = title
        self.author = author
        self.isbn = isbn
        self.quantity = quantity

    def add_book(self, quantity):
        self.quantity += quantity

    def update_book(self, title = None, author = None, isbn = None, quantity = None):
        if title:
            self.title = title
        if author:
            self.author = author
        if isbn:
            self.isbn = isbn
        if quantity is not None:
            self.quantity = quantity

    def remove_book(self):
        self.quantity = 0
        print("Book removed from library.")

    def display_book_details(self):
        print("Title: ", self.title)
        print("Author: ", self.author)
        print("ISBN: ", self.isbn)
        print("Quantity: ", self.quantity)

class Patron:
    def __init__(self, name, id, contact_info):
        self.name = name
        self.id = id
        self.contact_info = contact_info

    def add_patron(self, name, id, contact_info):
        self.name = name
        self.id = id
        self.contact_info = contact_info

    def update_patron(self, new_contact_info = None):
        self.contact_info = new_contact_info

    def remove_patron(self):
        self.name = ""
        self.id = ""
        self.contact_info = ""
        print("Patron removed from library.")

    def display_patron_details(self):
        print("Name: ", self.name)
        print("ID: ", self.id)
        print("Contact information: ", self.contact_info)

import datetime

class Transaction:
    def __init__(self, book, patron):
        self.book = book
        self.patron = patron
        self.checkout_date = datetime.datetime.now()
        self.due_date = None
        self.return_date = None
        self.fine = 0

    def checkin_book(self):
        self.book.quantity += 1
        print(f"Book '{self.book.title}' checked in.")

    def checkout_book(self, days=14):
        if self.book.quantity > 0:
            self.book.quantity -= 1
            self.due_date = self.checkout_date + datetime.timedelta(days=days)
            print(f"{self.patron.name} checked out '{self.book.title}'. Due date: {self.due_date.strftime('%Y-%m-%d')}")
        else:
            print("Sorry, the book is not available for checkout.")

    def return_book(self):
        self.return_date = datetime.datetime.now()
        if self.return_date > self.due_date:
            overdue_days = (self.return_date - self.due_date).days
            self.fine = overdue_days * 0.5
            print(f"{self.patron.name} returned '{self.book.title}' {overdue_days} days overdue. Fine: ${self.fine:.2f}")
        else:
            print(f"{self.patron.name} returned '{self.book.title}' on time.")

    def display_details(self):
        print("Book:", self.book.title)
        print("User:", self.patron.name)
        print("Checkout Date:", self.checkout_date.strftime('%Y-%m-%d'))
        print("Due Date:", self.due_date.strftime('%Y-%m-%d') if self.due_date else "Not checked out")
        print("Return Date:", self.return_date.strftime('%Y-%m-%d') if self.return_date else "Not returned")
        print("Fine: $", self.fine)

class Library:
    def __init__(self):
        self.books = {}
        self.patrons = {}
        self.transactions = []

    def add_book(self, book):
        self.books[book.isbn] = book

    def remove_book(self, isbn):
        if isbn in self.books:
            del self.books[isbn]
            print("Book removed from the library.")
        else:
            print("Book not found in the library.")

    def add_patron(self, patron):
        self.patrons[patron.id] = patron

    def remove_patron(self, id):
        if id in self.patrons:
            del self.patrons[id]
            print("Patron removed from library.")
        else:
            print("Patron not found in library.")

    def search_books(self, keyword):
        found_books = []
        for book in self.books.values():
            if keyword.lower() in book.title.lower() or keyword.lower() in book.author.lower():
                found_books.append(book)
        return found_books

    def add_transaction(self, transaction):
        self.transactions.append(transaction)

    def generate_reports(self):
        # Implement report generation logic here
        pass



Book1 = Book("Hello World", "May Chen", "111111111111", 5)
print("Book details: ")
Book1.display_book_details()
Book1.add_book(5)
print("\nAfter adding 5 copies: ")
Book1.display_book_details()
Book1.update_book(author = "James Chen", quantity = 15)
print("\nAfter updating author and quantity: ")
Book1.display_book_details()

Patron1 = Patron("John Chen", "111111111", "john@gmail.com")
print("Patron Details: ")
Patron1.display_patron_details()
Patron1.update_patron(new_contact_info = "johnchen@gmail.com")
print("\nAfter updating contact information: ")
Patron1.display_patron_details()
Patron1.remove_patron()
Patron2 = Patron("May Chen", "2222222222", "may@gmail.com")
Patron2.display_patron_details()

transaction1 = Transaction(Book1, Patron1)
transaction1.checkin_book()
transaction1.checkout_book()
transaction1.return_book()
Book1.display_book_details()
transaction2 = Transaction(Book1, Patron1)
transaction2.checkin_book()
Book1.display_book_details()
transaction3 = Transaction(Book1, Patron1)
transaction3.checkout_book()
Book1.display_book_details()

library = Library()
library.add_book(Book1)
library.add_patron(Patron1)
found_books = library.search_books("Hello World")
for book in found_books:
    print(book.title)
library.remove_book("111111111111")
library.remove_patron("111111111")
transaction = Transaction(Book1, Patron1)
library.add_transaction(transaction)
transaction.checkout_book()
transaction.checkin_book()
library.generate_reports()
