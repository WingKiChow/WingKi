class Book:
    def __init__(self, title, author, isbn, quantity):
        self.title = title
        self.author = author
        self.isbn = isbn
        self.quantity = quantity

    def add_book(self, quantity):
        self.quantity += quantity

    def update_book(self, title = None, author = None, isbn = None, quantity = None):
        if title:
            self.title = title
        if author:
            self.author = author
        if isbn:
            self.isbn = isbn
        if quantity is not None:
            self.quantity = quantity

    def remove_book(self):
        self.quantity = 0
        print("Book removed from library.")

    def display_book_details(self):
        print("Title: ", self.title)
        print("Author: ", self.author)
        print("ISBN: ", self.isbn)
        print("Quantity: ", self.quantity)

class Patron:
    def __init__(self, name, id, contact_info):
        self.name = name
        self.id = id
        self.contact_info = contact_info

    def add_patron(self, name, id, contact_info):
        self.name = name
        self.id = id
        self.contact_info = contact_info

    def update_patron(self, name = None, id = None, contact_info = None):
        if name:
            self.name = name
            self.id = id
            self.contact_info = contact_info

    def remove_patron(self):
        self.name = ""
        self.id = ""
        self.contact_info = ""
        print("Patron removed from library.")

    def display_patron_details(self):
        print("Name: ", self.name)
        print("ID: ", self.id)
        print("Contact information: ", self.contact_info)

class Transaction:
    def __init__(self):
        self.checked_out_books = {}
        self.checked_in_books = {}

    def check_out_book(self, book, patron, due_date):
        if book.quantity > 0:
            book.quantity -= 1
            self.checked_out_books[book.isbn] = (book, patron, due_date)
            print(f"{book.title} checked out to {patron.name}. Due date: {due_date}")
        else:
            print("Sorry, the book is out of the stock.")

    def check_in_book(self, isbn):
        if isbn in self.checked_out_books:
            book, patron, due_date = self.checked_out_books.pop(isbn)
            book.quantity += 1
            print(f"{book.title} returned by {patron.name}.")
        else:
            print("Invalid ISBN. Book not found in checked-out list.")

    def record_due_date(self, isbn, new_due_date):
        if isbn in self.checked_out_books:
            self.checked_out_books[isbn] = (self.checked_in_books[isbn][0], self.checked_out_books[isbn][1], new_due_date)
            print("Due date updated successfully.")
        else:
            print("Invalid ISBN. Book not found in check-out list.")

    def manage_fine(self, patron):
        pass

class Library:
    def __init__(self):
        self.books = {}
        self.patron = {}
        self.transactions = Transaction()

    def add_book(self, book):
        self.books[book.isbn] = book

    def remove_book(self, isbn):
        if isbn in self.books:
            del self.books[isbn]
            print("Book removed from the library.")
        else:
            print("Book not found in the library.")

    def add_patron(self, patron):
        self.patron[patron.id] = patron

    def remove_patron(self, id):
        if id in self.patron:
            del self.patron[id]
            print("Patron removed from library.")
        else:
            print("Patron not found in library.")

    def search_books(self, keyword):
        found_books = []
        for book in self.books.values():
            if keyword.lower() in book.title.lower() or keyword.lower() in book.author.lower():
                found_books.append(book)
        return found_books

    def transactions(self):
        #Implement transaction management logic here
        pass

    def generate_reports(self):
        #Implement report generation logic here
        pass

Book1 = Book("Hello World", "May Chen", "111111111111", 5)
print("Book details: ")
Book1.display_book_details()
Book1.add_book(5)
print("\nAfter adding 5 copies: ")
Book1.display_book_details()
Book1.update_book(author = "James Chen", quantity = 15)
print("\nAfter updating author and quantity: ")
Book1.display_book_details()
Patron1 = Patron("John Chen", "111111111", "john@gmail.com")
print("Patron Details: ")
Patron1.display_patron_details()
Patron1.update_patron(contact_info = "johnchen@gmail.com")
print("\nAfter updateing contact information: ")
Patron1.display_patron_details()
Patron1.remove_patron()
Patron2 = Patron("May Chen", "2222222222", "may@gmail.com")
Patron2.display_patron_details()

book1 = Book("Great", "Ron Chen", "333333333", "10")
patron1 = Patron("Jacky Chen", "444444444", "jacky@gmail.com")
transaction = Transaction()
transaction.checked_out_books(book1, patron1, "2024-04-01")
transaction.checked_in_books("333333333")
transaction.record_due_date("333333333", "2024-04-08")
print("\nRemaining Dooks in Library: ")
Book1.display_book_details()

library = Library()
Book1 = Book("Hello World", "May Chen", "111111111111", 5)
book1 = Book("Great", "Ron Chen", "333333333", "10")
library.add_book(Book1)
library.add_book(book1)
Patron1 = Patron("John Chen", "111111111", "john@gmail.com")
patron1 = Patron("Jacky Chen", "444444444", "jacky@gmail.com")
library.add_patron(Patron1)
library.add_patron(patron1)
print("Books containing 'World' in title or author: ")
found_books = library.search_books("World")
for book in found_books:
    book.displat_details()
library.transactions.checked_out_books(Book1, Patron1, "2024-04-01")
library.remove_book("111111111")
library.remove_patron("111111111")
